//
//  main.swift
//  day20
//
//  Created by Mark Johnson on 12/22/18.
//  Copyright Â© 2018 matzsoft. All rights reserved.
//

import Foundation

let test1 = """
^WNE$
"""
let test2 = """
^ENWWW(NEEE|SSE(EE|N))$
"""
let test3 = """
^ENNWSWW(NEWS|)SSSEEN(WNSE|)EE(SWEN|)NNN$
"""
let test4 = """
^ESSWWN(E|NNENN(EESS(WNSE|)SSS|WWWSSSSE(SW|NNNE)))$
"""
let test5 = """
^WSSEESWWWNW(S|NENNEEEENN(ESSSSW(NWSW|SSEN)|WSWWN(E|WWS(E|SS))))$
"""
let input = """
^WNWWWWNENENNNNNENESSSENNENNESSSWSEENESSSWWSEEENNEESWSEESSEEESSSWSSSSWWNWSSWNWSSSWWWSSESENN(ESSSEENWNEESESEEEEESESEENEEESSWNWSSSWSWNNENWWSSSSSWSSWWNNNWWWSEESWWWWSESWSWNNNWWWWNEENNNWNENWNNE(NWWNWWNNE(S|NWNENESEENNW(S|NWWNNNWWN(EENNWNE(EEESWSSSEEENNW(WSEWNE|)NNESE(N|SEEESWWWSESWWWSE(SWWNWWN(NNNN|EE)|EEE(S|NN)))|NWNEN(EE|WWW(SESSW(W|N)|NN)))|WSSSENESSWSS(ENEEWWSW|)SSWWWNENWWSWWWWWSESWWWSWWWSESEESESENNENN(EENN(WSNE|)ESSESEEESSESEESE(NNWWN(WNNWWN(EE|W(WNSE|)S)|E)|SWWWSSWWNNNWSSWWWWNNNN(NEN(W|ESESWSSE(NEE(NWNEWSES|)ES(EE|SS)|SWWNNN))|WSSSSSESWWNNNNWWWSWWNWWNNEN(ESS(W|E(E(NWES|)E|S))|WNWWNWNNNNNWWSSWNNWWSESWSWWNNE(S|NNENNESSENEEEEEENENWWNENNNWNNWWNNWNENWNNWNEEEENENWWWS(WNWSWNNENWWSWWSEESWWWSSESWWSESESWWSWNWNE(NNWWS(WSESWSWSWNWSWSWNWWNEEENEENE(S|NWNWSWNWWWNEENNWWWNNNWWNENEES(SENNENWNENNWNEENNNNNNNNNNNNNWNEESEEEENNNWSSWWNWWWWSWNWWNNENWWSSWNNNWSWWSESWSSWSSESWSSEEEENEESWSWWSSWNNWWSWNNWSSSESSW(SEENESSESEEENWWNWNEN(WWN(WSNE|)N|EEESEESENNNE(NNNNWSSWNNW(NWNWNN(NWW(WSESE(SWS(W(NNWESS|)S(E|W)|EE)|N)|NN)|ESE(ES(E(N|S(ENSW|)W)|W)|N))|SSWSS(WWNEWSEE|)ENE(SSWENN|)E)|SSSSSWWN(E|WSW(NN(WNWSNESE|)E|SSSSS(ENNE(NNWSNESS|)(E|SS)|WWNNNWN(EESSSNNNWW|)WWSESESWWWN(NWW(SSSE(NN|SWSSSEENESSSSWNWSW(NNEEWWSS|)SEEEENEENWNEESE(NNWWWW(NNEN(WN(WWSESWWS(NEENWNSESWWS|)|E)|E(SSWENN|)E)|SS)|SWSESE(NNEEWWSS|)SSS(WWNENWWWN(WSWWSSSEENESE(NNWWWS|ESENESSWSWSESEEEESESSESSSWWNN(ESNW|)WNN(ESNW|)NWSSWWWWSESWSWSWNWSSEEENESEEENNE(NWWN(E|WSS(SENSWN|)W)|SSENESENEENWNENWNEENNWSWWNENWNENW(WWWNWSS(WN|EEES)|NEEEEN(W|E(NWES|)SENEEESWSESSWWSEES(WSS(ENSW|)SWS(WNNENNWNNWSSW(NNNN(WWSSEN|ESENE(SEWN|)N)|SE(E|SSWSSW(NNNEWSSS|)SSEEN(W|N(N|ESSE(NN|SWWSESESESEESWWWWN(WWNN(ESEWNW|)NWN(WSWNN(ENWESW|)WSWWSWWNWSWWNEN(EEE(EE|S)|WWSWSESSSWSWNNENWNWWSSWNW(NNNNNENNE(SSSWSEES(WWS|ENE)|NENWNNWW(NENWNENEN(EEEES(E|SSSESS(ENESNWSW|)WWSW(SS(ENSW|)W|NWNNNESE(S(W|E)|NNWW(WSS|NEE))))|WW(S|NENWNNNE(SS|EE)))|SSS(ENNSSW|)SS))|SSEESE(SWWNWSSEESENESESWWSEESSSSWWWSSWNNNENEE(SWEN|)NWWWW(S(SSSSSSSEEEESSSWWWNN(ESENSWNW|)WSSSEEESSENEENW(W|NENESESEESEENWNWWNWNENWNWSWS(W(NNNWSWN(WSWNSENE|)NNESEEN(NEESSW(N|S(WSNE|)EESESSES(W|ENNWNENWNNENNNENNEESEEESSENENNW(WNNNWSSSWNWNENNEN(WNENNWWWSSSSWWWSEEE(SWS(E|WNWSSS(ENSW|)WNNWSSSS(SSSE(NNNNESS(NNWSSSNNNESS|)|S)|WNWNW(SSEWNN|)NNNNN(W(W|S)|EEEE(SSWNWSSS(WNNNSSSE|)S|NEENNWWWN(WSW(SES(ENEEWWSW|)WW|N)|EEEE(NEWS|)SSS)))))|ENNNNE)|EES(W|EEESENEENENEENWNE(ESSSENNESSSSWSEENESSWSSSWSEESSWNWWNWSWSWWNWSWNWNEENNENWNNEES(SSES(ENE(NE(S|NWWSWNNNE(N(WW(NEWS|)SW(N|WWSWWSEESWSWW(N(E|NWWNNEESW(ENWWSSNNEESW|))|SSWSSSWSESENESSENEESENESSESEESWWSEESESESWSSESENESEESWWSSEEEENW(NNNNESEEESSEENENNNESESWSEEENNNESSEESENNNNENENEESWSSESENN(W|EEEENESSESWSWNWSSSSSEEENWWNNEES(W|ENEENENNWWNENNWSWW(SESSS(ENEWSW|)W|NENWNWSWWNNNNWSWWSSESE(NNWESS|)SS(ENEEWWSW|)WWN(E|NWWWWSWSWWNWNWWSWWWWSS(WNWWWSWS(WNNNE(S|ENWWWNNWSSWSESE(SWWSW(S(EESENNW(ESSWNWESENNW|)|W)|NN(NNWS(S|WNNNWWNWNENN(WSWNWSWWN(W(S|NWSWNNENNEEN(SWWSSWENNEEN|))|E)|EN(W|ESSESS(ESE(SWWNSEEN|)NNNENNEEESWWSSWSEESSEENWNEESENNNNWW(SWWSEEEN(SWWWNEWSEEEN|)|NENEENWWWWWS(EE|WWW(SSW(SS|W)|NENE(NNESE(S(W|EEEN(WW|EEEEN(WWN(WSNE|)EE|EEEEE(SSSSENESENESSSSESWWNNWWSWWNN(E(S|EEE)|NNNNWWWSESSSWSWWNENENWWN(E|W(W|SS(E|SSW(NWES|)SESWSEEENESESWWSE(EEEENNESSS(S|ENNEN(WN(WWWW(SSENSWNN|)NW(WWWSNEEE|)(S|NENNNN)|N)|EEE(SWS(W(W|N)|E)|NEENNW(W(SEWN|)W|NENEN(ESEEESWSESSENNENENNWW(NENEN(ESESENEENNWWNEN(WWSS(SEEWWN|)W|ESESSESSSENESESWSSWNNWWSSE(SEEEESSSSESENNNW(NEESSSEESSEENNEENWWNNEEENNNNWWNWNEESENNNEENWNWWS(SSWWWNENWWNWWNNNWWSWSWSESSESSENESENE(NWNWSWNNW(NENSWS|)S|SSWSEE(NN|ESWWSWWN(E|WSS(WNWN(WSNE|)ENN(EESWENWW|)W(NNW(NNWW(SSENSWNN|)NENNWNWSS(E|SS|WNWWNEENNENWWNNENENWNWSSWNNWSSSESSS(SENSWN|)WNWN(WWWWNNNESSEENE(S|NWW(NNWSWNWNNWWSESSWNW(SSEEE(N|SSSWWWNEENWWWNNWSSWS(WNW(NEENSWWS|)S|EES(SEEEEEES(ENESEWNWSW|)(W|S)|W)))|NNNEEENWNNW(SS|NNENNENNESSSESEENWNNNW(NEESSENEEEESSWSESWSSEEN(NNESSSEEENNENWNWNENNENENWNNNNWSWWWWNWNNENNNENESEESSWNWSSSW(SEENNEENENEEENWWNNENNNNWNWNEENWNWSWNNNNESEES(WW|SESSENESSENNNWNENWWNW(SSESNWNN|)WWNNWWNEEESES(ENNWNWNWWWWS(SSWWNNNNNEES(WSSSNNNE|)EEEEENWNNWNENWNENNNESSENENWNWWNWNN(ESENESENESSEEENWN(WSNE|)EEEEEEEEESWWSSWSSWWSWWWSWWWSEEEEEEN(WW|ESESENENWN(W(W|S)|ENN(WSNE|)EESWSESSESWW(WSSSSESSWSESESSEE(NWNENNWSWNNNESENNWWWNEN(EE(SWEN|)NNNNNW(SS|NENWWWWNEEEENWWNEE(WWSEESNWWNEE|))|W)|SSSSSWNWWNENN(ESSNNW|)WWWWSSSSSWWSSEEN(W|EEESEESWWWW(NEWS|)WWWWNWSWNWWSWNWSSSEEESWWSWW(N(E|NNNNW(SSSSWENNNN|)NN(ESEEENESENNNWSWNNEEEENESE(SWS(WW(NE|SSEN)|E)|NNWWNENWNENNNESSESE(SE(S(ENSW|)WWNW(S|N)|N)|NNWNE(NNNNWSSWNWSWNNEENWWWSSSSSSWWNNE(S|NNNNWSWNWSWNNN(NENNN(WNWWEESE|)EEEESS(WWN(WSSEWNNE|)E|ENNNEN(WWSNEE|)EESWSSWN(SENNENSWSSWN|))|WWSSE(N|SS(WNSE|)SESESWW(W|N|SESSSSENNNNE(NNNN(ESNW|)W(S|W)|SSSESSS(WNNSSE|)ENE(S|NNNN(WS(WNSE|)SS|ENNNEEE(WWWSSSNNNEEE|))))))))|E)))|W))|SSSEENN(WSNE|)EESSSSESWWWWWSWSSWNNWW(SESSEEENNEEEEN(EESWSSSWNWWSSE(N|SSSENENN(WSNE|)ESENENNNNNNNENWWSW(NNW(NNN(WW|ESSEEES(WW|ESSSWSSENENENNW(NNEES(SEEE(NWWNNESENNWWNENE(N(WWSWNWSSSWWS(EEENNSSWWW|)(S|WWNENNWN(EEESSWN(SENNWWEESSWN|)|WWW(SES(W|E(E|SS|N))|W(WW|N))))|NNNNWW(SEWN|)NWSWWNNNNE(SSS|E))|S)|SWWSW(N|SWSWSSEESESESE(NNNNWNENW(NEWS|)WSS(SESNWN|)W(N|W)|SWSWSWNNENWNWWSESSSWNNWWSESSSSSESWSSSSESEEEENWWWNNW(NEEENESSWWSEEE(SSSSWNWSWNWSWSWWSSSWNNWSSWNWSSSENEEESWWSESENESSSEEENESSSESSE(SWSSSE(NN|SWWWWSESSWSESSWSSWSESSWSWWNEN(NNNNNWWNNNWSWWNNW(N(EENNNEESESSWW(N(N|E)|S(WSNE|)EESSSENE(SS(E|SS)|N(WNENWNNESENEE(SWEN|)NWWNENN(ESSNNW|)NWN(E|WSWNWWW(NN(EESWENWW|)NWNWWNNWSSWS(SS|WNW(NWSWNNNNWWNENWWNENNESENNWNEEEENNWWWNNESENEEESW(SEESEENNNENNWSWSS(S|WNNNENN(WSWNWNNWSWSESSS(EN(ESNW|)N|WWNWNNNE(SSESNWNN|)NWWNWS(SESSW(N|SES(E|SSSWS(EEEE|SWNWNNE(S|ENNW(SWWWWSEESSWSESSWW(SEEE(ENN(W(S|N)|E)|SSWNWWWS(EESSENEESWS(EEE|WW(SE(S|E)|W(NN|W)))|W))|N(WNNE(N(WNWNN(E(S|EEEE)|WSWSESSE(N|SWWNWWS(E|W(SEWN|)NWWWNENNEEESS(WNWSNESE|)E(NNNWNN(WSWWWS(WNN(N(ESEEWWNW|)N|W)|SS|EEE)|NNN(W|ENE(E|SSSW(N|SSE(S|N)))))|E))))|E)|S)|E))|NN)))))|WNNEEN(W|EESWSEE(NNE(NNEEE|SSE)|S))))|NENEE(NEENWNE(NNWSNESS|)EE|SWSEESW(WWNSEE|)SESSW(N|SESWW(N|SEESWSESWSS(WWNNE(NNWSWSSSSE(SWWSWWWSWS(WNNNE(EENNWNEENE(NN(WNWSS(WS(E|WNWSSESWW(W|S(EEE|S)))|E)|E)|SSSW(S|N))|S)|EE(SW|NEE))|EE)|S)|EEN(N|E|W)))))))|W)|S))|WSW(N|SSES(WSSSNNNE|)ENENW(NEESSS(SEENNW(NEESNWWS|)S|W)|W))))|E)))|WW)|SSSWW(NEWS|)SSENEENEESWSSEESSS(ENNNNWW(EESSSSNNNNWW|)|SWWNWSSEEESESWWNWWSESEEEEESWWSEESEEEEE(NNNWNNE(NWNNE(S|NNWNENWNNE(NNNWSSW(NN|SSSSWSES(E|WSSE(SSSWNW(NEWS|)S(WWNEWSEE|)SESWSEEN(ESNW|)N|N)))|S))|S)|SSWNWWS(E|WWN(E|WNWSWWNNWWSESS(WWN(NWNWWNEENE(S(S|E(EEESSNNWWW|)N)|NNNWWNWNWSSESES(ENSW|)SWWSWNWSWSWWWNWNNNNESESS(WNSE|)SENENNNW(SS|WNNNESENNNESES(SW(N|S(WW|SE(SES(WWNSEE|)E|N)))|ENNWNWN(EESE(N|SEESSS(WNWNEWSESE|)SENNEN(WNENWESWSE|)EES(W|S))|WWS(E|SSWNNNWSWWSESWWSWWWNNNNNEENNNNN(WWN(NNNNN(WSSWNWSSW(NNNWESSS|)SESESWSEE(ESE(N|SWS(E|WNWSSESSWSW(SSSWSWWSWSESWSEESWSWWSESWS(WNWNWWWSS(ENESEWNWSW|)WWNNWWWNEEENENESES(WWSSNNEE|)EEE(S|NWWNN(ESEE(SE|NW)|W(S|WWWSWSWWNNWNNWWSWSWSWSWWNENENNWWW(NEEEES(ENE(NWES|)EEEEEESWS(EEEENWNENNNW(NEEEWWWS|)SWS(E|WNWWS(WNNE(N(N|W)|E)|E)|SS)|SW(NWNEWSES|)S)|S)|WWWWSW(SWWSSWWWSESENESSWWS(WWWWNNWSWWNWNWSSWS(EE(N|EEE)|WWNENWWWWWNNWSWWNWNWSWSSSENNESSENESE(N|S(EEEENWWW(EEESWWEENWWW|)|WWWWWWWWWNWNNEEENNNNEENESEENESEEESEESEEES(WS(ESNW|)WNWSWWNN(ESNW|)WNWWW(WWWWS(E|SSSSWWN(E|W))|SE(S|E))|ENESENEEENESE(SWS(WNWSW(W|S|N)|SSEENWN(SESWWNSEENWN|))|EN(ESENSWNW|)WNWWWSWNNNESEN(EESWENWW|)NWWNWSSSSWS(E|WNWSWWNNNNNESSENNNWWNEENENWWWNWWWNWNWSSSWNWNNWNWNW(NENWN(W|NNNEESWSEESENN(EESWSSSSS(EN(N|ESE(S(W|SENEN(E(N|EESSWS(EE(NN|SSEE(NWES|)ESWS(ESNW|)WNWWSSE(N|SWSESWWWS(NEEENWESWWWS|)))|WN(NEWS|)W))|W))|N))|W(NNWW(SESNWN|)N(NWES|)EE|SS))|NNW(WWNSEE|)SS))|SSS(W|SEN(ESSSSEN(ESSESSS(WWNENWWSWWS(EESNWW|)WNNEEN(NWWWN(EEENWESWWW|)WSWWNW(SSEESSENE(SSWWWWSSWNNWWWNENNWSWSSWNNNW(SSSSEEEESSE(NN|SWWWSWW(NENEN(WWS|ES)|SSEEN(ENESSSS(ENNEE(NWN(WSNE|)ENN(WSNE|)ESSENE(NNW(S|N(WSNE|)EEE)|S)|SS(WNSE|)E)|WWWWNEEEN(SWWWSEWNEEEN|))|W)))|NNNESE(N|S(W|S|EEESE(NNWESS|)SEESWWWN(SEEENWESWWWN|))))|N(W|EE))|N(EESNWW|)N)|EE)|SEENWNENNW(NENW(WSNE|)N(EESSE(N(EE|N)|SWSSSSSENNNN(SSSSWNSENNNN|))|N)|S))|N)|N)))))))))|EEENENESS(EEEENWNEEN(WWNWWS(WNWN(WSS(S|E)|EEENW(NEEEE(SWWSES|E)|W))|SE(SWEN|)N)|ESSS(WNSE|)ENESENESEEEEENWWWWNENNWWS(E|SWWWNENE(S|NENE(SEWN|)N)))|W))|NNWNEES(NWWSESNWNEES|))))))|EEENESEEENNENEESWSES(WWNSEE|)ENENN(NW(WWNEEENNWNNWSWNWN(EEEENEE(SSW(WSNE|)N|NN)|WNW(NENSWS|)SSSW(N|SSSW(SEEE(SWSW(SEWN|)WW(NEE|WS)|NWNNEE(NWNSES|)S(ENESEWNWSW|)(W|SS))|NWNENW)))|SS)|ESSEEN(ESENEEN(W|ESEESWS(EENSWW|)WWW(NEEWWS|)WWWWWW)|W)))|NN(W(NNE(NWN(EEE|NWW(NNE(SENSWN|)N|WS(WNWSW(NNENWWWNEN(ESNW|)W|S)|SENESSW(ENNWSWENESSW|))))|S)|S)|E))))|NNNNWS)|E(N|S))|E)|EESE(N|SSSES(WSWNNW(NENWNSESWS|)SSSWW(NE|SSENE)|EEENES))))))))|E)|EEEE))))))|E))|NNNNNW(NWNWSWNNENWNWSS(SSSEWNNN|)WNNNNEENEEEESSWSW(WN(NE(E|S)|WW)|SES(W|SE(NNN|S)))|SS))|NNNNWWWNNWS(SSEWNN|)WNNEEEEE(N(W|N)|SSWWNE))|S))))|W)|S)))|S)|SESSSWSESW(ENWNENSWSESW|)))|WWW)|NEEENEEEEN(NN|WWWWWNN(ESNW|)WSSW(SEEWWN|)(WW|N))))))|NN)))|WSWWN(E|WSSWWSSSWSSWNWWNWNNNENEN(WWSWSWWWSSENEESWSSWSEEN(ESSSSSESWWWNNWSWNNN(ESEE(NWES|)SS|WNWNEE(S|N(E|WWWNEENWWNNWSSWWSSWNWWSESWWSWSWWNNWWWWSWWNENENWNEEENWNEN(ESSSESEES(ENNEEENEENWN(EEEEEES(WSWNSENE|)ENE(S|E)|WWWWSWNWWSES(W|E(SWEN|)EENE(S|E)))|W(WWWWNEE(WWSEEEWWWNEE|)|S(S|E)))|WWSSWWSWSS(ENSW|)WWNNNNWSSWNNN(EEEEEESWWWS(E|SS)|WSWNWSWSWWWNWSSWSWWNNE(NN(WSWWWWWWN(WSWWSWNWWN(EEEE|WSSWSWNNN(ESNW|)WWWSWWWSEEEENESSSSWWNN(ESNW|)WWWWWWWNWNN(WWWWSESEE(NWES|)SESWWWN(E|W(SSEEESWWSSW(SSSSSSSE(NNENWNENWNENEN(ENNEEEN(WW|ESSESEESSSW(SS(EEN(EES(W|EE(S|NENEENNNWWSWNWWSWSS(ENE(N|S(ENEENSWWSW|)S)|WNNNEN(WWNW(WNEEWWSE|)S|EEENN(WSNE|)EEN(NESESENEESWSEENENWN(WW|EESEEN(ESSWWSSWSWWWN(EENENSWSWW|)WWSSE(N|SWSSSSWSEEESENENNNEESENENWWWNWN(WWSSSSE(NN(E|N)|SWWNNN)|EEEN(NNESENEESSEESWWWN(WSW(S(ESSENNESSEENWNEENNNESSENNNEEEN(WNN(ESNW|)WSWWWWSES(ENEEWWSW|)WW(SEWN|)N|EESWSSSWSESEENEEN(NNWWSS(ENSW|)W(S|NN)|EESSESSENNENE(NWN(WSSWNSENNE|)E|EEEEEN(W|NESSSWSSWSSENEESSW(N|WWSEEEENEESWSSSEESENNEEESEENWNNESENNNESENN(WWWWSS(ENSW|)WWWNENE(S|NWWWNENWN(E|WN(E|NWWN(WWSSSSEENWN(EESSESWWSESE(S(WWNW(S|NWN(WSNE|)E)|SE(NNEWSS|)SES(ENESNWSW|)WW(WSEWNE|)N)|N)|N)|NNESSE))))|ESENNNNES(SSSSSSSSENEE(EE|SWSESSSSSSE(SSWSSS(EE(SWSNEN|)NN(WSNE|)ENNW(S|N)|WNWNNNE(NNNNWSWWSSSSWSSS(ENEN(W|NNNENW)|SWWWSSENES(ENSW|)SWSESSESSENEEEESSWNWSSWSSSE(S(SSE(SWEN|)N|WWNNNNWN(EENSWW|)WSWS(EE|WNNENN(ESNW|)NNWSSWWWWWNNNNWWNNNESEEEENNNWWSS(ENSW|)WNNNNENNWWNNWSSWSSSWWWNENNE(NWWNENWNNWNNEE(S(W|EESESS(ENNENE(NWES|)SEEN(EEEENNESSE(NNNNNWSWS(W(SSWNSENN|)N|E)|SEE(NWES|)S(ENSW|)WWS(WNNWWSSE(N|SSE(N|SSWSSSSWWW(NNESENNWWWSW(NNNESEENNN(ESS(S|E)|NNW(NEWS|)SSWNWSWS(EEESNWWW|)WNNNE(EE|S))|W)|SSSWSES(ENSW|)SSWWWNNNE(NWWW|SSEN))))|E))|W)|WNW(NWS|SSES)))|NWN(E|WSWNWSSESSSSWWSEESSE(ESWSSWWSSWNNNEENWNNWWSESWSSWSSSE(NN|ESENEENN(WSNE|)EEEEES(ENNNN(WSSNNE|)E|WWWWSSWSEESENE(SSEESWSESSEEESENE(E|SS(S|WWWNWWSS(ENSW|)WWWSES(ENSW|)SWNWSW(SEE(SWWEEN|)E|WNENENWWNWWW(SSENESE(WNWSWNSENESE|)|WWNNNNEENEENWWWNWSS(E|WWNENWNEN(EES(W|EES(E(EESSENESSWWSWN(NN|WWSWSES(WWNNSSEE|)EN(N|ESESENESENNWN(WSWENE|)E(ESSSNNNW|)NN))|NN)|W))|NNNWNWNENWWWSESSSSEE(NWNSES|)SWSWSSWSEE(SWSE(ENESNWSW|)S(S|WWNWWWWNNNENWWWSSSE(NN|SWSSSWNWSWWWNNESENNNNWWSESWWSSSWWWWSSW(SEEEEENN(ESENESSEENEESEENE(SSWSWWWSWSESWSSSWSSWSWNNWNNWNNWS(WNNEENNESSSES(W|SSE(NENNNW(NNW(N(W(NEWS|)WWWWSESEN(SWNWNEWSESEN|)|EES(S|ENE(EE|N)))|SS)|SS)|S))|SSESSSE(N|SWWNWN(NESNWS|)WWSW(NWWWEEES|)SESSESS(WNWNNSSESE|)E(NNN(NW(N|S)|ESES(W|ENEENW(WW|NEEEN(W|NNESSES(ENENWNNNNEEN(WWNNWSSSWSSE(SS|N)|E(E|SSWSS(WNNSSE|)SSEE(NWNNSSES|)SS))|W)))))|S)))|NNWNN(ESENSWNW|)WSW(SS(WWWSNEEE|)E(E|N|S)|N))|WWS(WNSE|)E)|NNNEN(WWSNEE|)EEN(E(SSWWEENN|)NWNENWNEES(SS|ENENEEE(NWNNNENEEEEESSSSWWNWSW(SEEEEES(ENN(E|WNENWNN(ESNW|)NWWWNENNNWSWWNWNENWWNENWWNNWNWNWNENENENWWNW(SS(E|SWNWSSESSWNWSWSSSWNNWSSWNNNNNWSSWSESSWWSEEEESSSWSWNWWSSWNNWWNNNNWWNEENWNNN(WW(SWSES(ENNSSW|)WWWNN(ESNW|)WWSSSSEN(NN|ESSWSSEEEENESE(SSESWSEE(NN|SEEN(EESWSSSSSS(WWNWWSWNNWWWSSWSWWWSWS(SSSENEES(SENNNWNW(SWNSEN|)NEEES(W|EENWN(W|NE(NWES|)SESE(SWSSWS(WNN(WSSNNE|)E|E)|NE(N|E))))|W)|WN(WSWNSENE|)NEN(W|EEENNWWNENNW(SW(SSSEEWWNNN|)N|NNNNEEN(WWNNNSSSEE|)EEEESWWSW(N|SEENESSESWWNWSWNW(WNENWESWSE|)SSSE(SS|NESENEEEN(N|EESE(N|SS(WWWN(WW|E(E|N))|S))))))))|EENNW(S|NNESEEESESENEESS(W(N|WWSSWWNW(SWNSEN|)NNE(NWES|)ES(W|S))|ENENNW(S|NNWNNNNWNNEENNWWS(E|WWWW(NEENE(NWNEEE(ESS(WNWSNESE|)E(N|SESSW(N|SEE(SESEE(SSWWWSWNW(SSESSS|NEN(ESEEWWNW|)NWSW(NNWESS|)SS)|E)|N)))|N)|S)|SSENESE(N|SWWWWSSSW(NNWWNSEESS|)S(W|ESENNNEEEE(NWWWWEEEES|)SSWWN(E|WSSEEEESWWW(EEENWWEESWWW|))))))))))|W))|NNWWNNWWSESWS(W|E)))|NNNN(E(NNNNNN(E|W(WS(WNSE|)E|N))|S)|W))|ESEESE(SS(E|WW(N(NWES|)E|SESWSSENEES(EENWESWW|)W))|NNE(S|NEEEESWSE(SWEN|)ENENNN(EE|WWWS(WWWN|EES))))))|NENEENNNEESWSSSS(WWNEWSEE|)E(ESSSWNNWSSSEESEENNESENEEESWSW(SWNWSSESSSSENENENNENESESWSW(SESESSSS(E(NNENWNENWN(WSNE|)NEE(S(SE(SWEN|)N|W)|NNNNWSSW(SEWN|)WNWW(NENWN(EESSE(S|NNNEE(SSWNSENN|)NENWWSWW(NE|SWN))|WWWWNWWW(NEEEE(SENSWN|)N(N|WW)|S(SS|EE)))|WSWSWS(S|E)))|SWS(S|E))|WWNENNWWW(SWNW(SSSE(SWEN|)NEE(SW|NE)|WWNW(NNW(S|NEE(SE(N|S(W|S))|NWWN(EE|WW(SSENSWNN|)WN(N(WSNE|)N|EE))))|SS))|NE(N|E)))|N)|N)|N)))|SW(N|SES(WWNSEE|)E))|NN(WSNE|)NESEE(NWES|)S)|SSSW(NW(NEWS|)W|SESWSE)))|W))))|NN)))))))|NNWWSE)))|NNNN)))|SS)))|NEN(NEWS|)W))|E|SS))|NN))|EEENWNNNENWNW(SSW(N|SES(WWNWWW(NEWS|)SEESSSWNNW(ESSENNSSWNNW|)|S))|NNESESENEE(SSW(N|SSSSSESWWNNNN(WSNE|)NN)|NWNWSWN(SENESEWNWSWN|))))))))))|WW)|N)|N)|W)))|W))|W)))))|W)|W)|NWN(E|WW(SEWN|)WW(WSWENE|)NEE(NWWEES|)E)))|W)|SWSESW)|NN)|N))|ESESEENN(W(W|S)|EEE)))|EEEEE)|E(EEESENE(WSWNWWEESENE|)|SS))|S))))))|N)|ESE(SSSWNNWSWSESE(WNWNENSWSESE|)|EN(ESNW|)W))))|EEE)|W))|W|NNN)|W)|SS)))|S))|E))|S)|S)|EESSEE(NWNENESEENNWS(NESSWWEENNWS|)|S(WW|SS))))))|E)|S)|N))|W)|S(E|S))|W))))|W)|SWWWWN(EENWWEESWW|)WSW(SEEWWN|)N)))))|EN(ES|NWWSE)))))|NNWN(ENWESW|)WWWSSWSE(SW|ENNE))|S))))|WNW(N|S)))))|E))|N))|EENESS(ES(ENNWESSW|)S|WW))|ENEES(W|E(EN(ESESSENN(SSWNNWESSENN|)|N|W)|S(W|SS))))))))|WW)))|E)|S))|S)|SW(WNEWSE|)S)|W)|NWWNN(EE(SWEN|)NN|WSWWWS(SENESS(W|E(ENWNSESW|)S)|W)))))|S)))|W)|S)|E))|E)|NEENWWNE(WSEESWENWWNE|))|NNN)))|E)|E))))))|E)|ENENNW(NEENWNNNW(S(WW|SS)|NN(W|EEN(NWN(E|W(SSEWNN|)W)|ESSSSW(NNWESS|)SESE(SSESE(SSWWS(WNNW(S(S|W)|NE(ESEWNW|)N(W|N))|EEE)|N(ES|NWNE))|NN))))|S))))))|E(NWES|)E)|ENNEES(WSEWNE|)EE)))|NNESEN(NWWEES|)E)|E))))))|N)|W))|E)|E)|E)))))|WSW(S|N|WW)))))|EESENE(ESENESSEESWSWS(EEE(SWSSNNEN|)N(W|NNNWWNE(WSEESSNNWWNE|))|WNWNN(ESEWNW|)W(SSS(E|SSWNWNENWW(SSSEWNNN|)NEN(ES|WNW))|N))|N))|W)$
"""

class Directions {
    var paths: [String] = []
    
    func parse( input: String ) -> [String] {
        func expand( input: String, index: inout String.Index ) -> [String] {
            var alternatives = [ [ "" ] ]
            
            while index < input.index(before: input.endIndex ) {
                switch input[index] {
                case "N", "S", "E", "W":
                    for i in 0 ..< alternatives.last!.count {
                        alternatives[ alternatives.count - 1 ][i].append( input[index] )
                    }
                    
                case "(":
                    index = input.index(after: index)
                    
                    let results = expand( input: input, index: &index )
                    var newPaths: [String] = []
                    
                    for path in alternatives.last! {
                        results.forEach { var new = path; new.append($0); newPaths.append(new) }
                    }
                    alternatives[ alternatives.count - 1 ] = newPaths
                    
                case "|":
                    alternatives.append( [ "" ] )
                    
                case ")":
//                    if alternatives.contains(where: { $0.count == 1 && $0[0] == "" } ) { return [ "" ] }
                    return alternatives.flatMap { $0 }
                    
                default:
                    print( "Invalid character '\(input[index])' in input" )
                    exit(1)
                }
                
                index = input.index(after: index)
            }
            
//            if alternatives.contains(where: { $0.count == 1 && $0[0] == "" } ) { return [ "" ] }
            return alternatives.flatMap { $0 }
        }
        
        guard input.first! == "^" else {
            print( "Input should start with '^'" )
            exit(1)
        }
        guard input.last! == "$" else {
            print( "Input should end with '$'" )
            exit(1)
        }
        
        var index = input.index(after: input.startIndex)
        
        paths = expand(input: input, index: &index )
        return paths
    }
    
    func maxLength() -> Int {
        return paths.max(by: { $0.count < $1.count } )!.count
    }
}

struct Position {
    var x: Int
    var y: Int
}

enum Cell: String {
    case wall = "#", room = ".", ewDoor = "|", nsDoor = "-", unknown = "?"
}

class Map {
    var map: [[Cell]]
    var xMin: Int
    var xMax: Int
    var yMin: Int
    var yMax: Int
    
    init() {
        map = Array( repeating: Array( repeating: Cell.unknown, count: 3 ), count: 3 )
        xMin = -1
        xMax = 1
        yMin = -1
        yMax = 1
        set( pos: Position( x: 0, y: 0 ), value: .room )
    }
    
    func get( pos: Position ) -> Cell {
        guard xMin <= pos.x && pos.x <= xMax else { return .unknown }
        guard yMin <= pos.y && pos.y <= yMax else { return .unknown }
        
        return map[ pos.y - yMin ][ pos.x - xMin ]
    }
    
    func set( pos: Position, value: Cell ) -> Void {
        while pos.y < yMin {
            map.insert( Array( repeating: Cell.unknown, count: xMax - xMin + 1 ), at: 0 )
            yMin -= 1
        }
        
        while pos.y > yMax {
            map.append( Array( repeating: Cell.unknown, count: xMax - xMin + 1 ) )
            yMax += 1
        }
        
        while pos.x < xMin {
            for y in yMin ... yMax {
                map[ y - yMin ].insert( .unknown, at: 0 )
            }
            xMin -= 1
        }
        
        while pos.x > xMax {
            for y in yMin ... yMax {
                map[ y - yMin ].append( .unknown )
            }
            xMax += 1
        }
        
        map[ pos.y - yMin ][ pos.x - xMin ] = value
    }
    
    func newRoomMaybe( pos: Position ) -> Void {
        var newPos = pos
        
        set(pos: pos, value: .room)
        
        newPos = Position(x: pos.x, y: pos.y - 1 )
        if case Cell.unknown = get( pos: newPos ) {
            set(pos: newPos, value: .unknown)
        }
        
        newPos = Position(x: pos.x, y: pos.y + 1 )
        if case Cell.unknown = get( pos: newPos ) {
            set(pos: newPos, value: .unknown)
        }
        
        newPos = Position(x: pos.x - 1, y: pos.y )
        if case Cell.unknown = get( pos: newPos ) {
            set(pos: newPos, value: .unknown)
        }
        
        newPos = Position(x: pos.x + 1, y: pos.y )
        if case Cell.unknown = get( pos: newPos ) {
            set(pos: newPos, value: .unknown)
        }
    }

    func walkAndDraw( path: String ) -> Void {
        var current = Position(x: 0, y: 0)
        
        for direction in path {
            switch direction {
            case "N":
                current.y -= 1
                set(pos: current, value: .nsDoor)
                current.y -= 1
                newRoomMaybe(pos: current)
            case "S":
                current.y += 1
                set(pos: current, value: .nsDoor)
                current.y += 1
                newRoomMaybe(pos: current)
            case "E":
                current.x += 1
                set(pos: current, value: .ewDoor)
                current.x += 1
                newRoomMaybe(pos: current)
            case "W":
                current.x -= 1
                set(pos: current, value: .ewDoor)
                current.x -= 1
                newRoomMaybe(pos: current)
            default:
                print( "Argh, how did '\(direction)' get in here" )
            }
        }
    }
    
    func possibleMoves( position: Position ) -> [Position] {
        let x = position.x
        let y = position.y
        var moves: [Position] = []

        if case Cell.nsDoor = get( pos: Position(x: x, y: y-1) ) {
            moves.append( Position(x: x, y: y-2) )
        }

        if case Cell.ewDoor = get( pos: Position(x: x-1, y: y) ) {
            moves.append( Position(x: x-2, y: y) )
        }

        if case Cell.ewDoor = get( pos: Position(x: x+1, y: y) ) {
            moves.append( Position(x: x+2, y: y) )
        }

        if case Cell.nsDoor = get( pos: Position(x: x, y: y+1) ) {
            moves.append( Position(x: x, y: y+2) )
        }
        
        return moves
    }
    
    func allDistances() -> [[Int]] {
        var distances = Array( repeating: Array(repeating: -1, count: map[0].count), count: map.count )
        let position = Position(x: 0, y: 0)
        var queue = [ position ]
        
        distances[ position.y - yMin ][ position.x - xMin ] = 0
        while queue.count > 0 {
            let current = queue.removeFirst()
            let distance = distances[ current.y - yMin ][ current.x - xMin ] + 1
            let moves = possibleMoves(position: current)
            
            for move in moves {
                if distances[ move.y - yMin ][ move.x - xMin ] == -1 {
                    distances[ move.y - yMin ][ move.x - xMin ] = distance
                    queue.append(move)
                }
            }
        }
        
        return distances
    }
    
    func printMap() -> Void {
        for y in yMin ... yMax {
            var line = map[ y - yMin ].map { $0.rawValue }.joined()
            
            if y == 0 {
                let index = line.index( line.startIndex, offsetBy: -xMin )
                
                line = line.replacingCharacters( in: index ... index, with: "X" )
            }
            
            print( line )
        }
        print()
    }
}


let directions = Directions()
let results = directions.parse(input: input)
let map = Map()

print(results.count)
print( "Part1:", directions.maxLength() )

map.printMap()
directions.paths.forEach { map.walkAndDraw( path: $0 ) }
//map.printMap()

let distances = map.allDistances()

print( "Part1:", distances.flatMap { $0 }.max()! )
